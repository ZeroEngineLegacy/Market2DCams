class TopDownCellCamera : ZilchComponent
{
    [Dependency]
    var Transform : Transform;
    
    [Dependency]
    var Camera : Camera;
    
    [Dependency]
    var CameraViewport : CameraViewport;
    
    //WorldSpace size of the viewport
    var CellSize : Real2
    {
        get
        {
            var tLeft = this.CameraViewport.ScreenToWorldZPlane(this.CameraViewport.ViewportToScreen(Real2(0,0)), 0);
            var bRight = this.CameraViewport.ScreenToWorldZPlane(this.CameraViewport.ViewportToScreen(this.CameraViewport.ViewportResolution), 0);
            
            return Real2(bRight.X - tLeft.X, tLeft.Y - bRight.Y);
        }
    }
    
    //Duration to shift the camera from one cell to the next
    [Property]
    var ShiftDuration : Real = 1.0;
    
    //CogPath to the player object
    [Property]
    var PlayerCogPath : CogPath;
    var Player : Cog { get { return this.PlayerCogPath.Cog; } }
    
    //Helper members for player transform properties
    var PlayerPos : Real3 { get { return this.Player.Transform.Translation; } }
    var PlayerScale : Real3 { get { return this.Player.Transform.Scale; } }
    var PlayerHalfXScale : Real { get { return this.PlayerScale.X / 2.0; } }
    var PlayerHalfYScale : Real { get { return this.PlayerScale.Y / 2.0; } }
    
    //Epsilon used to prevent state flip-flopping
    var Epsilon : Real = 0.01;
    
    //Should this component write debug output to the console
    [Property]
    var PrintDebug : Boolean = true;
    
    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }

    function OnLogicUpdate(event : UpdateEvent)
    {
        //Calculate the edge positions of the player sprite in WorldSpace
        var leftPos = this.PlayerPos - Real3(this.PlayerHalfXScale, 0.0, 0.0);
        var rightPos = this.PlayerPos + Real3(this.PlayerHalfXScale, 0.0, 0.0);
        var botPos = this.PlayerPos - Real3(0.0, this.PlayerHalfYScale, 0.0);
        var topPos = this.PlayerPos + Real3(0.0, this.PlayerHalfYScale, 0.0);
        
        //Convert the player sprite WorldSpace edge positions to ScreenSpace
        var leftScreenPos = this.CameraViewport.WorldToScreen(leftPos);
        var rightScreenPos = this.CameraViewport.WorldToScreen(rightPos);
        var botScreenPos = this.CameraViewport.WorldToScreen(botPos);
        var topScreenPos = this.CameraViewport.WorldToScreen(topPos);
        
        //Convert the player sprite ScreenSpace edge positions to ViewportSpace
        var leftViewPos = this.CameraViewport.ScreenToViewport(leftScreenPos);
        var rightViewPos = this.CameraViewport.ScreenToViewport(rightScreenPos);
        var botViewPos = this.CameraViewport.ScreenToViewport(botScreenPos);
        var topViewPos = this.CameraViewport.ScreenToViewport(topScreenPos);
        
        //Check the edge positions against the viewport resolutions to see 
        //if the player sprite has reached any of the viewport edges
        if(leftViewPos.X <= 0.0)
            this.ShiftLeft();
        else if(rightViewPos.X >= this.CameraViewport.ViewportResolution.X)
            this.ShiftRight();
        else if(botViewPos.Y >= this.CameraViewport.ViewportResolution.Y)
            this.ShiftDown();
        else if(topViewPos.Y <= 0.0)
            this.ShiftUp();
    }
    
    function ShiftLeft()
    {
        if(this.PrintDebug)
            Console.WriteLine("ShiftLeft");
        
        //Calculate the left edge of the viewport in WorldSpace and the target position for the Camera and Player
        var leftEdge = this.CameraViewport.ScreenToWorldZPlane(this.CameraViewport.ViewportToScreen(Real2(0,0)), 0.0);
        var targCamPos = this.Transform.Translation - Real3(this.CellSize.X, 0.0, 0.0);
        var targPlayerPos = Real3(leftEdge.X - this.PlayerHalfXScale - this.Epsilon, this.PlayerPos.Y, 0.0);
        
        this.Shift(targCamPos, targPlayerPos);
    }
    
    function ShiftRight()
    {
        if(this.PrintDebug)
            Console.WriteLine("ShiftRight");
        
        //Calculate the left edge of the viewport in WorldSpace and the target position for the Camera and Player
        var rightEdge = this.CameraViewport.ScreenToWorldZPlane(this.CameraViewport.ViewportToScreen(this.CameraViewport.ViewportResolution), 0.0);
        var targCamPos = this.Transform.Translation + Real3(this.CellSize.X, 0.0, 0.0);
        var targPlayerPos = Real3(rightEdge.X + this.PlayerHalfXScale + this.Epsilon, this.PlayerPos.Y, 0.0);
        
        this.Shift(targCamPos, targPlayerPos);
    }
    
    function ShiftUp()
    {
        if(this.PrintDebug)
            Console.WriteLine("ShiftUp");
        
        //Calculate the left edge of the viewport in WorldSpace and the target position for the Camera and Player
        var topEdge = this.CameraViewport.ScreenToWorldZPlane(this.CameraViewport.ViewportToScreen(Real2(0,0)), 0.0);
        var targCamPos = this.Transform.Translation + Real3(0.0, this.CellSize.Y, 0.0);
        var targPlayerPos = Real3(this.PlayerPos.X, topEdge.Y + this.PlayerHalfYScale + this.Epsilon, 0.0);
        
        this.Shift(targCamPos, targPlayerPos);
    }
    
    function ShiftDown()
    {
        if(this.PrintDebug)
            Console.WriteLine("ShiftDown");
        
        //Calculate the left edge of the viewport in WorldSpace and the target position for the Camera and Player
        var botEdge = this.CameraViewport.ScreenToWorldZPlane(this.CameraViewport.ViewportToScreen(this.CameraViewport.ViewportResolution), 0.0);
        var targCamPos = this.Transform.Translation - Real3(0.0, this.CellSize.Y, 0.0);
        var targPlayerPos = Real3(this.PlayerPos.X, botEdge.Y - this.PlayerHalfYScale - this.Epsilon, 0.0);
        
        this.Shift(targCamPos, targPlayerPos);
    }
    
    //Shifts the Camera and Player to the given positions
    function Shift(targCamPos : Real3, targPlayerPos : Real3)
    {
        this.DisablePlayerInput();
        
        var seq = Actions.Sequence(this.Owner.Actions);
        var grp = Actions.Group(seq);
        Actions.Property(grp, @this.Transform.Translation, targCamPos, this.ShiftDuration, Ease.Linear);
        Actions.Property(grp, @this.Player.Transform.Translation, targPlayerPos, this.ShiftDuration, Ease.Linear);
        Actions.Call(seq, this.EnablePlayerInput);
    }
    
    function EnablePlayerInput()
    {
        this.Owner.DispatchEvent(Events.EnablePlayerInput, ZilchEvent());
    }
    
    function DisablePlayerInput()
    {
        
        this.Owner.DispatchEvent(Events.DisablePlayerInput, ZilchEvent());
    }
}
